# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

setup_servers ()
{
	if [ ${HOSTNAME} == "x220" ]; then
		SERVER="home"
		ALIAS="x220"
	elif [ ${HOSTNAME} == "Stephens-Air" ] || [ ${HOSTNAME} == "Stephens-Air.lan" ] || [ ${HOSTNAME} == "Stephens-MacBook-Air.local" ]  ; then
		SERVER="dev"
		ALIAS="air"
	else
		# probably on a dev server
		SERVER="dev"
		ALIAS="dev"
	fi
}

setup_system ()
{
	# If not running interactively, don't do anything
	[ -z "$PS1" ] && return

	# don't put duplicate lines in the history. See bash(1) for more options
	export HISTCONTROL=ignoredups
	# ... and ignore same sucessive entries.
	export HISTCONTROL=ignoreboth

	export DISPLAY=:0.0

	# check the window size after each command and, if necessary,
	# update the values of LINES and COLUMNS.
	shopt -s checkwinsize

	# make less more friendly for non-text input files, see lesspipe(1)
	[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

	# set variable identifying the chroot you work in (used in the prompt below)
	if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
		debian_chroot=$(cat /etc/debian_chroot)
	fi

	# If this is an xterm set the title to user@host:dir
	case "$TERM" in xterm*|rxvt*)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
		;;
		*)
		;;
	esac

	# enable color support of ls and also add handy aliases
	if [ "$TERM" != "dumb" ] && [ -x /usr/bin/dircolors ]; then
		eval "`dircolors -b`"
		export TERM=xterm-256color
	fi

	# enable programmable completion features (you don't need to enable
	# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
	# sources /etc/bash.bashrc).
	if [ -f /etc/bash_completion ]; then
	. /etc/bash_completion
	fi
}

setup_aliases ()
{
	# Personal
	alias grep='grep --color=always'
	alias tclsh="rlwrap tclsh"
	alias ls='ls -1 -X --group-directories-first --color=auto'
	alias ll='ls -lh'
	alias la='ll -A'
	alias l='ls -CF'
	alias x='exit'
	alias sd='shutdown -P 0'
	alias ssh='ssh -X'
	alias vi='vim -X'
	alias subl='subl3'
	alias dockkill="docker ps -a | grep -v CONTAINER | awk '{print \$1}' | xargs docker kill"
	alias dockrm="docker ps -a | grep -v CONTAINER | awk '{print \$1}' | xargs docker rm"
}

bash_prompt_command () {

	# How many characters of the $PWD should be kept
	local pwdmaxlen=25
	# Indicate that there has been dir truncation
	local trunc_symbol=".."
	local dir=${PWD##*/}
	pwdmaxlen=$(( ( pwdmaxlen < ${#dir} ) ? ${#dir} : pwdmaxlen ))
	NEW_PWD=${PWD/#$HOME/\~}
	local pwdoffset=$(( ${#NEW_PWD} - pwdmaxlen ))
	if [ ${pwdoffset} -gt "0" ]
	then
		NEW_PWD=${NEW_PWD:$pwdoffset:$pwdmaxlen}
		NEW_PWD=${trunc_symbol}/${NEW_PWD#*/}
		PWD=${NEW_PWD}
    fi
}

## get current git branch
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/' | sed -e 's/wherewolf-//' | sed -e 's/(master)//'
}

setup_variables ()
{
	arch=`uname -m | sed -e 's/i.86/ix86/' -e 's/sun4./sun4/'`
	export PROMPT_COMMAND=bash_prompt_command

	export PS1='\[$(tput bold)\]\[$(tput setaf 20)\]\h\[$(tput setaf 7)\]:\[$(tput setaf 5)\]\w\[$(tput setaf 22)\]`parse_git_branch`\[$(tput setaf 3)\]$ \[$(tput sgr0)\]'
}

setup_servers
setup_system
setup_variables
setup_aliases
