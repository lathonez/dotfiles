# For setting up iptables from scratch
#
# - view existing rules: iptables -L
#                        iptables -L -t nat
#
# - save rules (so they will be restored when the NIC comes back up:
#

# delete any existing rules (main table and nat table)
iptables -F
iptables -F -t nat
iptables -F -t mangle

# accept stuff
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# ssh
iptables -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT

# web
iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT

# terraria?
iptables -A INPUT -p tcp -m tcp --dport 5091 -j ACCEPT

# ?
iptables -A INPUT -p tcp -m tcp --dport 7777 -j ACCEPT

# ?
iptables -A INPUT -p tcp -m tcp --dport 5000 -j ACCEPT

# ?
iptables -A INPUT -p tcp -m tcp --dport 3541 -j ACCEPT

# custproxy
iptables -A INPUT -p tcp -m tcp --dport 9090 -j ACCEPT

#
# PORT FORWARDING EXAMPLE - 9090 to 9091:
#
# what's happening here is that before the main table actually receives the request, it gets transformed
# from the source port to the destination port. Therefore you need an ACCEPT rule in for the dest port only
#
# Note for port forwarding between two IPs you need this kernel thing set to 1 net.ipv4.ip_forward
#

# 1 - Do the transform / forward (this is pre processing)
# iptables -t nat -A PREROUTING -p tcp -i eth0 -d 176.58.107.25 --dport 9090 -j DNAT --to 176.58.107.25:9091

# 2 - Allow the forward in the main table
# iptables -A FORWARD -p tcp -i eth0 -d 176.58.107.25 --dport 9091 -j ACCEPT

# 3 - Accept the dest port
# iptables -A INPUT -p tcp -m tcp --dport 9091 -j ACCEPT

#
# END PORT FORWARDNG EXAMPLE
#

# If anything gets this far, it's getting dropped:
# log dropped packets - tail -f /var/log/kern.log
iptables -A INPUT -m limit --limit 100/min -j LOG --log-prefix "iptables INPUT denied: " --log-level 7

# drop everything else
iptables -A INPUT -j DROP

